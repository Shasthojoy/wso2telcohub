package org.dialog.custom.hostobjects;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dialog.custom.hostobjects.internal.HostObjectComponent;
import org.wso2.carbon.apimgt.api.APIManagementException;
import org.wso2.carbon.apimgt.impl.APIManagerConfiguration;
import org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil;
import org.wso2.carbon.apimgt.usage.client.exception.APIMgtUsageQueryServiceClientException;


public class BillingDataAccessObject {

	private static volatile DataSource statDatasource = null;
	private static volatile DataSource apimgtDatasource = null;
	private static final String API_USAGE_TRACKING = "APIUsageTracking.";
	private static final String STAT_SOURCE_NAME = API_USAGE_TRACKING + "DataSourceName";
	private static final String APIMGT_SOURCE_NAME = "DataSourceName";
	private static final Log log = LogFactory.getLog(BillingDataAccessObject.class);

	public static void initializeDataSource() throws APIMgtUsageQueryServiceClientException {
		if (statDatasource != null && apimgtDatasource != null) {
			return;
		}
		APIManagerConfiguration config = HostObjectComponent.getAPIManagerConfiguration();
		String statdataSourceName = config.getFirstProperty(STAT_SOURCE_NAME);
		String apimgtdataSourceName = config.getFirstProperty(APIMGT_SOURCE_NAME);

		if (statdataSourceName != null) {
			try {
				Context ctx = new InitialContext();
				statDatasource = (DataSource) ctx.lookup(statdataSourceName);
			} catch (NamingException e) {
				throw new APIMgtUsageQueryServiceClientException(
				                                                 "Error while looking up the data " +
				                                                         "source: " +
				                                                         statdataSourceName);
			}

		}

		if (apimgtdataSourceName != null) {
			try {
				Context ctx = new InitialContext();
				apimgtDatasource = (DataSource) ctx.lookup(apimgtdataSourceName);
			} catch (NamingException e) {
				throw new APIMgtUsageQueryServiceClientException(
				                                                 "Error while looking up the data " +
				                                                         "source: " +
				                                                         apimgtdataSourceName);
			}

		}
	}

	public static void printAPIRequestSummary() throws SQLException, APIManagementException,
	                                           APIMgtUsageQueryServiceClientException {
		String sql = "select * from API_REQUEST_SUMMARY";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = getStatsDBConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				// api| api_version| version | apiPublisher | consumerKey|
				// userId| context | max_request_time |
				// \total_request_count | hostName | year | month | day | time
				System.out.println("=== Results for api :" + rs.getString("api") + " , ck :  " +
				                   rs.getString("consumerKey") + " , count : " +
				                   rs.getInt("total_request_count"));
			}

		} catch (SQLException e) {
			handleException("Error occurred while querying Request Summary", e);
		} finally {
			APIMgtDBUtil.closeAllConnections(ps, conn, rs);
		}

	}

	public static Map<String, Integer> getAPICountsForApplication(String consumerKey, String year,
	                                                              String month, String userId)
	                                                                                          throws APIManagementException,
	                                                                                          APIMgtUsageQueryServiceClientException {
		Connection connection = null;
		PreparedStatement ps = null;
		ResultSet results = null;
		String sql =
		             "select api_version,sum(total_request_count) as total "
		                     + "from API_REQUEST_SUMMARY where " + "year=? AND " + "month=? AND "
		                     + "consumerKey=?  AND " + "userId=? group by api_version;";
		Map<String, Integer> apiCount = new HashMap<String, Integer>();
		try {
			connection = getStatsDBConnection();
			ps = connection.prepareStatement(sql);
			ps.setString(1, year);
			ps.setString(2, month);
			ps.setString(3, consumerKey);
			ps.setString(4, userId);

			results = ps.executeQuery();
			while (results.next()) {
				apiCount.put(results.getString("api_version"), results.getInt("total"));
			}
		} catch (SQLException e) {
			handleException("Error occurred while getting Invocation count for Application", e);
		} finally {
			APIMgtDBUtil.closeAllConnections(ps, connection, results);
		}

		return apiCount;
	}

	public static void printAPISubscriberTable() throws SQLException,
	                                            APIMgtUsageQueryServiceClientException {
		String sql = "select * from AM_SUBSCRIBER";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = getApiMgtDBConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				// api| api_version| version | apiPublisher | consumerKey|
				// userId| context | max_request_time |
				// \total_request_count | hostName | year | month | day | time
				System.out.println("=== Results for SUBSCRIBER_ID  :" + rs.getInt("SUBSCRIBER_ID") +
				                   " , USER_ID :  " + rs.getString("USER_ID") +
				                   " , DATE_SUBSCRIBED : " + rs.getDate("DATE_SUBSCRIBED"));
			}

		} catch (SQLException e) {
			log.error("Error occured while querying Request Summary", e);
			throw e;
		} finally {
			APIMgtDBUtil.closeAllConnections(ps, conn, rs);
		}

	}

	public static Connection getStatsDBConnection() throws SQLException,
	                                               APIMgtUsageQueryServiceClientException {
		initializeDataSource();
		if (statDatasource != null) {
			return statDatasource.getConnection();
		} else {
			throw new SQLException("Statistics Datasource not initialized properly");
		}
	}

	public static Connection getApiMgtDBConnection() throws SQLException,
	                                                APIMgtUsageQueryServiceClientException {
		initializeDataSource();
		if (apimgtDatasource != null) {
			return apimgtDatasource.getConnection();
		} else {
			throw new SQLException("Statistics Datasource not initialized properly");
		}
	}

	public static List<String> getAllSubscriptions() throws APIMgtUsageQueryServiceClientException,
	                                                SQLException {
		String sql = "select USER_ID from AM_SUBSCRIBER";
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List<String> subscriber = new ArrayList<String>();
		try {
			conn = getApiMgtDBConnection();
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				subscriber.add(rs.getString("USER_ID"));
			}

		} catch (SQLException e) {
			log.error("Error occured while querying Request Summary", e);
			throw e;
		} finally {
			APIMgtDBUtil.closeAllConnections(ps, conn, rs);
		}
		return subscriber;
	}

	private static void handleException(String msg, Throwable t) throws APIManagementException {
		log.error(msg, t);
		throw new APIManagementException(msg, t);
	}

}
