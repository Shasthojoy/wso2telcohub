/*
 * Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.dialog.custom.hostobjects;

import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.stream.XMLStreamException;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.om.util.AXIOMUtil;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.wso2.carbon.apimgt.api.APIConsumer;
import org.wso2.carbon.apimgt.api.APIManagementException;
import org.wso2.carbon.apimgt.api.model.Tier;
import org.wso2.carbon.apimgt.impl.APIConstants;
import org.wso2.carbon.apimgt.impl.APIManagerFactory;
import org.wso2.carbon.apimgt.impl.utils.APIUtil;
import org.wso2.carbon.apimgt.usage.client.dto.APIVersionUserUsageDTO;
import org.wso2.carbon.apimgt.usage.client.exception.APIMgtUsageQueryServiceClientException;

public class BillingHostObject extends ScriptableObject {

	private static final Log log = LogFactory.getLog(BillingHostObject.class);
	private String hostobjectName = "DialogBilling";
	private APIConsumer apiConsumer;
	private static Map<String, Float> tierPricing = new HashMap<String, Float>();

	public String getUsername() {
		return username;
	}

	private String username;

	@Override
	public String getClassName() {
		return hostobjectName;
	}

	public BillingHostObject(String username) throws APIManagementException {
		log.info("::: Initialized HostObject for : " + username);
		if (username != null) {
			this.username = username;
			apiConsumer = APIManagerFactory.getInstance().getAPIConsumer(username);
		} else {
			apiConsumer = APIManagerFactory.getInstance().getAPIConsumer();
		}
	}

	public BillingHostObject() {
		log.info("::: Initialized HostObject ");
	}

	public APIConsumer getApiConsumer() {
		return apiConsumer;
	}

	private static APIConsumer getAPIConsumer(Scriptable thisObj) {
		return ((BillingHostObject) thisObj).getApiConsumer();
	}

	public static String jsFunction_getReportFileContent(Context cx, Scriptable thisObj,
                                                         Object[] args, Function funObj)
                                                                 throws APIManagementException {
		if (args == null || args.length == 0) {
			handleException("Invalid number of parameters.");
		}

		String subscriberName = (String) args[0];
		String period = (String) args[1];
		
		generateReport(subscriberName,period);
		
		String fileContent = HostObjectUtils.getReport(subscriberName, period);
		return fileContent;
	}
	
	public static NativeArray jsFunction_getAPIUsageforSubscriber(Context cx, Scriptable thisObj,
	                                                              Object[] args, Function funObj)
	                                                                                             throws APIManagementException {
		List<APIVersionUserUsageDTO> list = null;
		if (args == null || args.length == 0) {
			handleException("Invalid number of parameters.");
		}
		NativeArray myn = new NativeArray(0);
		if (!HostObjectUtils.checkDataPublishingEnabled()) {
			return myn;
		}
		String subscriberName = (String) args[0];
		String period = (String) args[1];

		NativeArray ret = generateReport(subscriberName,period);
		
		return ret;

	}
	
	private static NativeArray generateReport(String subscriberName,String period) throws APIManagementException{
		
		createTierPricingMap();

		NativeArray ret = null;
		try {
			ret =
			      HostObjectUtils.generateReportofSubscriber(true, subscriberName, period,
			                                                 tierPricing);
		} catch (APIMgtUsageQueryServiceClientException e) {
			handleException("Error occurred while executing the dummyQuery.", e);
		} catch (SQLException e) {
			handleException("Error occurred while retrieving data.", e);
		} catch (IOException e) {
			handleException("Error occurred while generating report.", e);
		}
		return ret;
	}
	

	private static int getMaxCount(Tier tier) throws XMLStreamException {
		OMElement policy = AXIOMUtil.stringToOM(new String(tier.getPolicyContent()));
		OMElement maxCount =
		                     policy.getFirstChildWithName(APIConstants.POLICY_ELEMENT)
		                           .getFirstChildWithName(APIConstants.THROTTLE_CONTROL_ELEMENT)
		                           .getFirstChildWithName(APIConstants.POLICY_ELEMENT)
		                           .getFirstChildWithName(APIConstants.THROTTLE_MAXIMUM_COUNT_ELEMENT);
		if (maxCount != null)
			return Integer.parseInt(maxCount.getText());

		return -1;
	}

	private static int getTimeUnit(Tier tier) throws XMLStreamException {
		OMElement policy = AXIOMUtil.stringToOM(new String(tier.getPolicyContent()));
		OMElement timeUnit =
		                     policy.getFirstChildWithName(APIConstants.POLICY_ELEMENT)
		                           .getFirstChildWithName(APIConstants.THROTTLE_CONTROL_ELEMENT)
		                           .getFirstChildWithName(APIConstants.POLICY_ELEMENT)
		                           .getFirstChildWithName(APIConstants.THROTTLE_UNIT_TIME_ELEMENT);
		if (timeUnit != null)
			return Integer.parseInt(timeUnit.getText());

		return -1;
	}

	private static void createTierPricingMap() throws APIManagementException {
		Map<String, Tier> tierMap = APIUtil.getTiers();
		for (Map.Entry<String, Tier> entry : tierMap.entrySet()) {
			Map<String, Object> attributes = entry.getValue().getTierAttributes();
			if (attributes != null && attributes.containsKey("Rate")) {
				tierPricing.put(entry.getKey(), Float.parseFloat(attributes.get("Rate").toString()));
			} else {
				tierPricing.put(entry.getKey(), 0f);
			}
		}
	}

	private static void printTierPricing() throws APIManagementException {
		createTierPricingMap();
		System.out.println("Print Tier Pricings");
		for (Map.Entry<String, Float> pricing : tierPricing.entrySet()) {
			System.out.println("Price for Tier : " + pricing.getKey() + " = " + pricing.getValue());
		}
	}

	private static void handleException(String msg) throws APIManagementException {
		log.error(msg);
		throw new APIManagementException(msg);
	}

	private static void handleException(String msg, Throwable t) throws APIManagementException {
		log.error(msg, t);
		throw new APIManagementException(msg, t);
	}
}
